import numpy as np 
image = cv2.imread('x.webp', cv2.IMREAD_GRAYSCALE) 
sobel_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)  
sobel_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)   
sobel_edges = cv2.magnitude(sobel_x, sobel_y)  
laplacian_edges = cv2.Laplacian(image, cv2.CV_64F) 
canny_edges = cv2.Canny(image, 100, 200) 
sobel_edges = cv2.convertScaleAbs(sobel_edges) 
laplacian_edges = cv2.convertScaleAbs(laplacian_edges) 
cv2.imshow('Original Image', image) 
cv2.imshow('Sobel Edge Detection', sobel_edges) 
cv2.imshow('Laplacian Edge Detection', laplacian_edges) 
cv2.imshow('Canny Edge Detection', canny_edges) 
cv2.waitKey(0) 
cv2.destroyAllWindows()
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load image in grayscale
image = cv2.imread('x.webp', cv2.IMREAD_GRAYSCALE)

# Sobel edge detection
sobel_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)  
sobel_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)   
sobel_edges = cv2.magnitude(sobel_x, sobel_y)  
sobel_edges = cv2.convertScaleAbs(sobel_edges)

# Laplacian edge detection
laplacian_edges = cv2.Laplacian(image, cv2.CV_64F) 
laplacian_edges = cv2.convertScaleAbs(laplacian_edges)

# Canny edge detection
canny_edges = cv2.Canny(image, 100, 200)

# Plot all results
titles = ['Original Image', 'Sobel Edge Detection', 'Laplacian Edge Detection', 'Canny Edge Detection']
images = [image, sobel_edges, laplacian_edges, canny_edges]

plt.figure(figsize=(12, 8))
for i in range(4):
    plt.subplot(2, 2, i+1)
    plt.imshow(images[i], cmap='gray')
    plt.title(titles[i])
    plt.axis('off')

plt.tight_layout()
plt.show()
